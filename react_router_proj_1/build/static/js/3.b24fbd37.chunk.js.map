{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","quiteId","onAddComment","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/3.b24fbd37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3IxVm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__S5uzh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1eYyy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2nPnC\",\"loading\":\"NewCommentForm_loading__50qIX\",\"control\":\"NewCommentForm_control__3lq06\",\"actions\":\"NewCommentForm_actions__bqcSV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3L_Rr\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error } = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  },[status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from '../comments/CommentsList';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {quoteId} = params;\n  const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n  \n  let comments;\n\n  if(status === 'pending'){\n    comments = <div className='centered'><LoadingSpinner /></div>\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)){\n    comments = <CommentsList comments={loadedComments}/>;\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className='centered'>No comments have been added yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quiteId={params.quoteId} onAddComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{`\"${props.text}\"`}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n    const {quoteId} = params; //ok, why is the app not rendering single quotes!\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect( () => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(error){\r\n        return <p className=\"centered\">{error}</p>\r\n    }\r\n\r\n    if(!loadedQuote.text){\r\n        return <p>No quote found</p>\r\n    }\r\n\r\n    console.log(match)\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={match.path} exact>\r\n            <div className=\"centered\">\r\n                <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                    Open Comments\r\n                </Link>\r\n            </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment >\r\n    )\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}